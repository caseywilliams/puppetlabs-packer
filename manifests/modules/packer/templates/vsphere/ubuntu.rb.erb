#!/usr/bin/ruby
hostname = `vmtoolsd --cmd "info-get guestinfo.hostname"`

hostname = hostname.chomp

puts "Nice to meet you, my VM name is '#{hostname}'."
 
puts "\n"
 
puts '- Setting local hostname...'
 
File.open('/etc/hostname', 'w') do |f|
  f.write(hostname)
end
 
Kernel.system('hostname -F /etc/hostname')

dhc = File.read('/etc/dhcp/dhclient.conf')

<% if ['18.04'].include? @operatingsystemrelease -%>
Kernel.system("hostnamectl set-hostname #{hostname}")
<% else -%>
File.open('/etc/dhcp/dhclient.conf', 'w') do |f|
  <% if ['15.10', '16.04', '16.10'].include? @operatingsystemrelease -%>
  dhc.gsub!(/^(send host-name.*)/, "send host-name \"#{hostname}\";")
  <% else -%>
  dhc.gsub!(/^(#send host-name.*)/, "send host-name \"#{hostname}\";")
  <% end -%>
f.write(dhc)
end
<% end -%>

File.open('/etc/hosts', 'w') do |f|
  f.puts "127.0.0.1 localhost"
  f.puts "127.0.1.1 #{hostname}"
end
 
puts '- Re-obtaining DHCP lease...'
 
<% if ['15.10', '16.04', '16.10'].include? @operatingsystemrelease -%>
# NetworkManager
Kernel.system('/usr/sbin/service networking restart')
<% elsif ['18.04'].include? @operatingsystemrelease -%>
# systemd-networkd's DHCP client uses /etc/machine-id instead of the link layer address (as dhclient does) to generate the DUID
# /etc/machine-id will be the same on VMs cloned from the same template, so regenerate it:
File.delete('/etc/machine-id')
Kernel.system("systemd-machine-id-setup")
# systemd-networkd
Kernel.system('/bin/systemctl daemon-reload')
Kernel.system('/bin/systemctl restart systemd-networkd')
<% else -%>
Kernel.system('/sbin/ifdown eth0 && /sbin/ifup eth0')
<% end -%>
 
puts '- Cleaning up...'
 
#Kernel.system('rm /etc/vsphere-bootstrap.rb')
<% unless ['18.04'].include? @operatingsystemrelease -%>
# The presence of rc.local on systemd will result in an rc.local service being created
Kernel.system('echo "exit 0" > /etc/rc.local')
<% end -%>
 
puts "\n"
 
puts 'Done!'
